version: '3.8'

networks:
  microservices-net:
    name: microservices-net
    driver: bridge

volumes:
  rabbitmq_data:

services:
  # ===================
  # INFRASTRUCTURE
  # ===================
  
  # PostgreSQL - Base de données principale
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpassword
      POSTGRES_DB: microservices
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache et State Management Dapr
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.broker.rule=Host(`broker.aetherweave.local`)"
      - "traefik.http.routers.broker.entrypoints=web"
      - "traefik.http.services.broker.loadbalancer.server.port=15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===================
  # SÉCURITÉ / AUTH
  # ===================
  
  # Keycloak PostgreSQL
  keycloak-db:
    image: postgres:16-alpine
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - ./data/keycloak-db:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak - SSO Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    command: start-dev --import-realm
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8080
      KC_HOSTNAME: idp.aetherweave.local
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.idp.rule=Host(`idp.aetherweave.local`)"
      - "traefik.http.routers.idp.entrypoints=web"
      - "traefik.http.services.idp.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===================
  # API GATEWAY
  # ===================
  
  # Traefik - Reverse Proxy & API Gateway
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.network=microservices-net"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/dynamic:/etc/traefik/dynamic
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`gateway.aetherweave.local`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.service=api@internal"
    depends_on:
      - keycloak

  # ===================
  # OBSERVABILITÉ
  # ===================
  
  # Jaeger - Tracing distribué
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tracing.rule=Host(`tracing.aetherweave.local`)"
      - "traefik.http.routers.tracing.entrypoints=web"
      - "traefik.http.services.tracing.loadbalancer.server.port=16686"

  # Prometheus - Métriques
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metrics.rule=Host(`metrics.aetherweave.local`)"
      - "traefik.http.routers.metrics.entrypoints=web"
      - "traefik.http.services.metrics.loadbalancer.server.port=9090"

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_ROOT_URL: http://monitoring.aetherweave.local
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.rule=Host(`monitoring.aetherweave.local`)"
      - "traefik.http.routers.monitoring.entrypoints=web"
      - "traefik.http.services.monitoring.loadbalancer.server.port=3000"

  # ===================
  # API DOCUMENTATION
  # ===================
  
  # Scalar - API Documentation Portal
  scalar:
    image: nginx:alpine
    container_name: scalar
    volumes:
      - ./scalar:/usr/share/nginx/html:ro
      - ./scalar/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - microservices-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`api.docs.aetherweave.local`)"
      - "traefik.http.routers.docs.entrypoints=web"
      - "traefik.http.services.docs.loadbalancer.server.port=80"

  # ===================
  # DAPR PLACEMENT
  # ===================
  
  # Dapr Placement Service
  dapr-placement:
    image: daprio/dapr:1.12.0
    container_name: dapr-placement
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - microservices-net

  # ===================
  # EXEMPLE SERVICE (décommenter pour tester)
  # ===================
  
  # Service Backend Exemple
  # example-service:
  #   build: ../services/example-service
  #   container_name: example-service
  #   environment:
  #     DATABASE_URL: postgresql://devuser:devpassword@postgres:5432/microservices
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - microservices-net

  # Dapr Sidecar pour Example Service
  # example-service-dapr:
  #   image: daprio/daprd:1.12.0
  #   container_name: example-service-dapr
  #   command: [
  #     "./daprd",
  #     "-app-id", "example-service",
  #     "-app-port", "3000",
  #     "-dapr-http-port", "3500",
  #     "-dapr-grpc-port", "50001",
  #     "-placement-host-address", "dapr-placement:50006",
  #     "-components-path", "/components",
  #     "-config", "/config/config.yaml"
  #   ]
  #   volumes:
  #     - ./dapr/components:/components
  #     - ./dapr/config:/config
  #   depends_on:
  #     - example-service
  #     - dapr-placement
  #   network_mode: "service:example-service"