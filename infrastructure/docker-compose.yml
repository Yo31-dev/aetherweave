networks:
  aetherweave-net:
    name: aetherweave-net
    driver: bridge

volumes:
  rabbitmq_data:

services:
  # ===================
  # INFRASTRUCTURE
  # ===================

  # PostgreSQL - Primary database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpassword
      POSTGRES_DB: aetherweave
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - aetherweave-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache and Dapr state management
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - aetherweave-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - aetherweave-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===================
  # SECURITY / AUTH
  # ===================

  # Keycloak PostgreSQL
  keycloak-db:
    image: postgres:16-alpine
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - ./data/keycloak-db:/var/lib/postgresql/data
    networks:
      - aetherweave-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak - SSO Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    command: start-dev --import-realm
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - aetherweave-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===================
  # API GATEWAY
  # ===================

  # Envoy - API Gateway (DEPRECATED - replaced by APISIX)
  # Uncomment to re-enable Envoy for rollback
  # envoy:
  #   image: envoyproxy/envoy:v1.28-latest
  #   container_name: envoy
  #   ports:
  #     - "80:80" # HTTP
  #     - "8001:8000" # HTTP (moved to 8001 to avoid conflict with APISIX)
  #     - "9901:9901" # Admin
  #   volumes:
  #     - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
  #   command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
  #   networks:
  #     - aetherweave-net
  #   depends_on:
  #     - keycloak

  # etcd - Configuration store for APISIX
  etcd:
    image: quay.io/coreos/etcd:v3.5.11
    container_name: etcd
    command:
      - /usr/local/bin/etcd
      - --data-dir=/etcd-data
      - --name=etcd
      - --advertise-client-urls=http://etcd:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --initial-advertise-peer-urls=http://etcd:2380
      - --listen-peer-urls=http://0.0.0.0:2380
      - --initial-cluster=etcd=http://etcd:2380
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - ./data/etcd:/etcd-data
    networks:
      - aetherweave-net
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      ETCDCTL_API: "3"

  # APISIX - API Gateway (PRODUCTION)
  apisix:
    image: apache/apisix:3.7.0-debian
    container_name: apisix
    environment:
      APISIX_STAND_ALONE: "false"
    ports:
      - "8000:9080"   # HTTP Gateway (primary, was Envoy)
      - "9080:9080"   # HTTP Gateway (alternative)
      - "9180:9180"   # Admin API
      - "9091:9091"   # Prometheus metrics
    volumes:
      - ./apisix/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    networks:
      - aetherweave-net
    depends_on:
      etcd:
        condition: service_healthy
      keycloak:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "test -e /usr/local/apisix/logs/nginx.pid && kill -0 $(cat /usr/local/apisix/logs/nginx.pid) || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # APISIX Dashboard - Web UI for managing APISIX
  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    container_name: apisix-dashboard
    ports:
      - "9000:9000"
    volumes:
      - ./apisix/dashboard_conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
    networks:
      - aetherweave-net
    depends_on:
      apisix:
        condition: service_healthy
    restart: unless-stopped

  # APISIX Declarative Config Sync - Syncs apisix.yaml to etcd
  apisix-sync:
    image: apache/apisix:3.7.0-debian
    container_name: apisix-sync
    volumes:
      - ./apisix/apisix.yaml:/usr/local/apisix/conf/apisix.yaml:ro
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for APISIX Admin API to be ready..."
        until curl -s -o /dev/null -w "%{http_code}" http://apisix:9180/apisix/admin/routes -H "X-API-KEY: admin-key-aetherweave" | grep -q "200"; do
          echo "Waiting... APISIX Admin API not ready yet"
          sleep 2
        done
        echo "✓ APISIX Admin API is ready!"
        echo ""
        echo "Synchronizing apisix.yaml to etcd..."
        /usr/local/apisix/apisix sync -f /usr/local/apisix/conf/apisix.yaml
        echo ""
        echo "✓ Configuration synchronized successfully!"
        echo "Routes are now available in APISIX and visible in Dashboard"
    networks:
      - aetherweave-net
    depends_on:
      apisix:
        condition: service_healthy
    restart: "no"

  # ===================
  # OBSERVABILITY
  # ===================

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # UI
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    networks:
      - aetherweave-net

  # Prometheus - Metrics
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    networks:
      - aetherweave-net

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3100:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger
    networks:
      - aetherweave-net

  # ===================
  # DAPR PLACEMENT
  # ===================

  # Dapr Placement Service (required for actors and workflow)
  dapr-placement:
    image: daprio/dapr:1.12.0
    container_name: dapr-placement
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - aetherweave-net

  # ===================
  # EXAMPLE SERVICE
  # ===================

  # Example backend service
  # example-service:
  #   build: ./services/example-service
  #   container_name: example-service
  #   environment:
  #     DATABASE_URL: postgresql://devuser:devpassword@postgres:5432/aetherweave
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - aetherweave-net

  # Dapr Sidecar for Example Service
  # example-service-dapr:
  #   image: daprio/daprd:1.12.0
  #   container_name: example-service-dapr
  #   command: [
  #     "./daprd",
  #     "-app-id", "example-service",
  #     "-app-port", "3000",
  #     "-dapr-http-port", "3500",
  #     "-dapr-grpc-port", "50001",
  #     "-placement-host-address", "dapr-placement:50006",
  #     "-components-path", "/components",
  #     "-config", "/config/config.yaml"
  #   ]
  #   volumes:
  #     - ./dapr/components:/components
  #     - ./dapr/config:/config
  #   depends_on:
  #     - example-service
  #     - dapr-placement
  #     - redis
  #     - rabbitmq
  #   network_mode: "service:example-service"

  # ===================
  # API DOCUMENTATION
  # ===================

  # Scalar API Documentation Portal
  api-docs:
    build: ./api-docs
    container_name: api-docs
    ports:
      - "3200:80"
    networks:
      - aetherweave-net
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:80/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ===================
  # FRONTEND / PORTAL
  # ===================

  # Nginx to serve the frontend
  # frontend:
  #   image: nginx:alpine
  #   container_name: frontend
  #   ports:
  #     - "8888:80"
  #   volumes:
  #     - ./frontend/dist:/usr/share/nginx/html
  #     - ./frontend/nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     - aetherweave-net
  #   depends_on:
  #     - envoy
