static_resources:
  listeners:
  - name: main_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend_services
              domains: ["*"]
              routes:
              # Route vers les services via Dapr
              - match:
                  prefix: "/api/v1/"
                route:
                  cluster: dapr_cluster
                  prefix_rewrite: "/"
                  timeout: 30s
              # Route pour le health check
              - match:
                  prefix: "/health"
                direct_response:
                  status: 200
                  body:
                    inline_string: "OK"
              cors:
                allow_origin_string_match:
                - safe_regex:
                    regex: \*
                allow_methods: "GET, POST, PUT, DELETE, PATCH, OPTIONS"
                allow_headers: "authorization, content-type, x-requested-with, x-dapr-app-id"
                expose_headers: "content-length, content-type"
                max_age: "86400"
          http_filters:
          # CORS Filter
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          # JWT Authentication (Keycloak)
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                keycloak_provider:
                  issuer: http://localhost:8080/realms/microservices
                  audiences:
                  - microservices-api
                  remote_jwks:
                    http_uri:
                      uri: http://keycloak:8080/realms/microservices/protocol/openid-connect/certs
                      cluster: keycloak_cluster
                      timeout: 5s
                    cache_duration:
                      seconds: 300
                  forward: true
                  forward_payload_header: x-jwt-payload
              rules:
              - match:
                  prefix: "/api/v1/"
                requires:
                  provider_name: keycloak_provider
              # Routes publiques (pas de JWT requis)
              - match:
                  prefix: "/health"
          # Router (doit être le dernier)
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          tracing:
            provider:
              name: envoy.tracers.zipkin
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
                collector_cluster: jaeger_cluster
                collector_endpoint: "/api/v2/spans"
                collector_endpoint_version: HTTP_JSON

  clusters:
  # Cluster Dapr (vers les sidecars des services)
  - name: dapr_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: dapr_cluster
      endpoints:
      - lb_endpoints:
        # Exemple: pointer vers le sidecar Dapr d'un service
        # À adapter selon tes services
        - endpoint:
            address:
              socket_address:
                address: example-service
                port_value: 3500
    # Health check optionnel
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: "/v1.0/healthz"

  # Cluster Keycloak (pour récupérer les JWKS)
  - name: keycloak_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: keycloak_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: keycloak
                port_value: 8080
    connect_timeout: 5s

  # Cluster Jaeger (pour le tracing)
  - name: jaeger_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: jaeger_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: jaeger
                port_value: 9411
    connect_timeout: 1s

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901