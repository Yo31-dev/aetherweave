version: '3.8'

networks:
  microservices-net:
    name: microservices-net
    driver: bridge

volumes:
  rabbitmq_data:

services:
  # ===================
  # INFRASTRUCTURE
  # ===================
  
  # PostgreSQL - Base de données principale
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpassword
      POSTGRES_DB: microservices
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache et State Management Dapr
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===================
  # SÉCURITÉ / AUTH
  # ===================
  
  # Keycloak PostgreSQL
  keycloak-db:
    image: postgres:16-alpine
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - ./data/keycloak-db:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak - SSO Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    command: start-dev --import-realm
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms:/opt/keycloak/data/import
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===================
  # API GATEWAY
  # ===================
  
  # Envoy - API Gateway
  envoy:
    image: envoyproxy/envoy:v1.28-latest
    container_name: envoy
    ports:
      - "8000:8000"   # HTTP
      - "9901:9901"   # Admin
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
    networks:
      - microservices-net
    depends_on:
      - keycloak

  # ===================
  # OBSERVABILITÉ
  # ===================
  
  # Jaeger - Tracing distribué
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - microservices-net

  # Prometheus - Métriques
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    networks:
      - microservices-net

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger
    networks:
      - microservices-net

  # ===================
  # DAPR PLACEMENT
  # ===================
  
  # Dapr Placement Service (requis pour actors et workflow)
  dapr-placement:
    image: daprio/dapr:1.12.0
    container_name: dapr-placement
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - microservices-net

  # ===================
  # EXEMPLE SERVICE
  # ===================
  
  # Service Backend Exemple
  # example-service:
  #   build: ./services/example-service
  #   container_name: example-service
  #   environment:
  #     DATABASE_URL: postgresql://devuser:devpassword@postgres:5432/microservices
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - microservices-net

  # Dapr Sidecar pour Example Service
  # example-service-dapr:
  #   image: daprio/daprd:1.12.0
  #   container_name: example-service-dapr
  #   command: [
  #     "./daprd",
  #     "-app-id", "example-service",
  #     "-app-port", "3000",
  #     "-dapr-http-port", "3500",
  #     "-dapr-grpc-port", "50001",
  #     "-placement-host-address", "dapr-placement:50006",
  #     "-components-path", "/components",
  #     "-config", "/config/config.yaml"
  #   ]
  #   volumes:
  #     - ./dapr/components:/components
  #     - ./dapr/config:/config
  #   depends_on:
  #     - example-service
  #     - dapr-placement
  #     - redis
  #     - rabbitmq
  #   network_mode: "service:example-service"

  # ===================
  # FRONTEND / PORTAIL
  # ===================
  
  # Nginx pour servir le frontend
  # frontend:
  #   image: nginx:alpine
  #   container_name: frontend
  #   ports:
  #     - "8888:80"
  #   volumes:
  #     - ./frontend/dist:/usr/share/nginx/html
  #     - ./frontend/nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     - microservices-net
  #   depends_on:
  #     - envoy